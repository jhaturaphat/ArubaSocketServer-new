'use strict';function cov_2jqruxqaek(){var path="/Users/sitita/ArubaSocketServer/lib/limiter.js";var hash="ceab332ad79175e52aaf25b1ca0550cbdbfa820b";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/sitita/ArubaSocketServer/lib/limiter.js",statementMap:{"0":{start:{line:3,column:14},end:{line:3,column:29}},"1":{start:{line:4,column:13},end:{line:4,column:27}},"2":{start:{line:18,column:4},end:{line:21,column:6}},"3":{start:{line:19,column:6},end:{line:19,column:21}},"4":{start:{line:20,column:6},end:{line:20,column:19}},"5":{start:{line:22,column:4},end:{line:22,column:47}},"6":{start:{line:23,column:4},end:{line:23,column:19}},"7":{start:{line:24,column:4},end:{line:24,column:21}},"8":{start:{line:34,column:4},end:{line:34,column:24}},"9":{start:{line:35,column:4},end:{line:35,column:17}},"10":{start:{line:44,column:4},end:{line:44,column:50}},"11":{start:{line:44,column:43},end:{line:44,column:50}},"12":{start:{line:46,column:4},end:{line:51,column:5}},"13":{start:{line:47,column:18},end:{line:47,column:35}},"14":{start:{line:49,column:6},end:{line:49,column:21}},"15":{start:{line:50,column:6},end:{line:50,column:23}},"16":{start:{line:55,column:0},end:{line:55,column:25}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:17,column:2},end:{line:17,column:3}},loc:{start:{line:17,column:27},end:{line:25,column:3}},line:17},"1":{name:"(anonymous_1)",decl:{start:{line:18,column:18},end:{line:18,column:19}},loc:{start:{line:18,column:24},end:{line:21,column:5}},line:18},"2":{name:"(anonymous_2)",decl:{start:{line:33,column:2},end:{line:33,column:3}},loc:{start:{line:33,column:11},end:{line:36,column:3}},line:33},"3":{name:"(anonymous_3)",decl:{start:{line:43,column:2},end:{line:43,column:3}},loc:{start:{line:43,column:11},end:{line:52,column:3}},line:43}},branchMap:{"0":{loc:{start:{line:22,column:23},end:{line:22,column:46}},type:"binary-expr",locations:[{start:{line:22,column:23},end:{line:22,column:34}},{start:{line:22,column:38},end:{line:22,column:46}}],line:22},"1":{loc:{start:{line:44,column:4},end:{line:44,column:50}},type:"if",locations:[{start:{line:44,column:4},end:{line:44,column:50}},{start:{line:44,column:4},end:{line:44,column:50}}],line:44},"2":{loc:{start:{line:46,column:4},end:{line:51,column:5}},type:"if",locations:[{start:{line:46,column:4},end:{line:51,column:5}},{start:{line:46,column:4},end:{line:51,column:5}}],line:46}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0},f:{"0":0,"1":0,"2":0,"3":0},b:{"0":[0,0],"1":[0,0],"2":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"ceab332ad79175e52aaf25b1ca0550cbdbfa820b"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_2jqruxqaek=function(){return actualCoverage;};}return actualCoverage;}cov_2jqruxqaek();const kDone=(cov_2jqruxqaek().s[0]++,Symbol('kDone'));const kRun=(cov_2jqruxqaek().s[1]++,Symbol('kRun'));/**
 * A very simple job queue with adjustable concurrency. Adapted from
 * https://github.com/STRML/async-limiter
 */class Limiter{/**
   * Creates a new `Limiter`.
   *
   * @param {Number} [concurrency=Infinity] The maximum number of jobs allowed
   *     to run concurrently
   */constructor(concurrency){cov_2jqruxqaek().f[0]++;cov_2jqruxqaek().s[2]++;this[kDone]=()=>{cov_2jqruxqaek().f[1]++;cov_2jqruxqaek().s[3]++;this.pending--;cov_2jqruxqaek().s[4]++;this[kRun]();};cov_2jqruxqaek().s[5]++;this.concurrency=(cov_2jqruxqaek().b[0][0]++,concurrency)||(cov_2jqruxqaek().b[0][1]++,Infinity);cov_2jqruxqaek().s[6]++;this.jobs=[];cov_2jqruxqaek().s[7]++;this.pending=0;}/**
   * Adds a job to the queue.
   *
   * @param {Function} job The job to run
   * @public
   */add(job){cov_2jqruxqaek().f[2]++;cov_2jqruxqaek().s[8]++;this.jobs.push(job);cov_2jqruxqaek().s[9]++;this[kRun]();}/**
   * Removes a job from the queue and runs it if possible.
   *
   * @private
   */[kRun](){cov_2jqruxqaek().f[3]++;cov_2jqruxqaek().s[10]++;if(this.pending===this.concurrency){cov_2jqruxqaek().b[1][0]++;cov_2jqruxqaek().s[11]++;return;}else{cov_2jqruxqaek().b[1][1]++;}cov_2jqruxqaek().s[12]++;if(this.jobs.length){cov_2jqruxqaek().b[2][0]++;const job=(cov_2jqruxqaek().s[13]++,this.jobs.shift());cov_2jqruxqaek().s[14]++;this.pending++;cov_2jqruxqaek().s[15]++;job(this[kDone]);}else{cov_2jqruxqaek().b[2][1]++;}}}cov_2jqruxqaek().s[16]++;module.exports=Limiter;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpbWl0ZXIuanMiXSwibmFtZXMiOlsia0RvbmUiLCJTeW1ib2wiLCJrUnVuIiwiTGltaXRlciIsImNvbnN0cnVjdG9yIiwiY29uY3VycmVuY3kiLCJwZW5kaW5nIiwiSW5maW5pdHkiLCJqb2JzIiwiYWRkIiwiam9iIiwicHVzaCIsImxlbmd0aCIsInNoaWZ0IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUEsYSx1eUZBZVk7MkZBYlosS0FBTUEsQ0FBQUEsS0FBSywwQkFBR0MsTUFBTSxDQUFDLE9BQUQsQ0FBVCxDQUFYLENBQ0EsS0FBTUMsQ0FBQUEsSUFBSSwwQkFBR0QsTUFBTSxDQUFDLE1BQUQsQ0FBVCxDQUFWLENBRUE7QUFDQTtBQUNBO0FBQ0EsR0FDQSxLQUFNRSxDQUFBQSxPQUFRLENBQ1o7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQ0VDLFdBQVcsQ0FBQ0MsV0FBRCxDQUFjLGlEQUN2QixLQUFLTCxLQUFMLEVBQWMsSUFBTSxpREFDbEIsS0FBS00sT0FBTCxHQURrQix3QkFFbEIsS0FBS0osSUFBTCxJQUNELENBSEQsQ0FEdUIsd0JBS3ZCLEtBQUtHLFdBQUwsQ0FBbUIsNEJBQUFBLFdBQVcsK0JBQUlFLFFBQUosQ0FBOUIsQ0FMdUIsd0JBTXZCLEtBQUtDLElBQUwsQ0FBWSxFQUFaLENBTnVCLHdCQU92QixLQUFLRixPQUFMLENBQWUsQ0FBZixDQUNELENBRUQ7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQ0VHLEdBQUcsQ0FBQ0MsR0FBRCxDQUFNLGlEQUNQLEtBQUtGLElBQUwsQ0FBVUcsSUFBVixDQUFlRCxHQUFmLEVBRE8sd0JBRVAsS0FBS1IsSUFBTCxJQUNELENBRUQ7QUFDRjtBQUNBO0FBQ0E7QUFDQSxLQUNFLENBQUNBLElBQUQsR0FBUyxrREFDUCxHQUFJLEtBQUtJLE9BQUwsR0FBaUIsS0FBS0QsV0FBMUIsQ0FBdUMsNERBQU8sQ0FBOUMsaUNBRE8seUJBR1AsR0FBSSxLQUFLRyxJQUFMLENBQVVJLE1BQWQsQ0FBc0IsNEJBQ3BCLEtBQU1GLENBQUFBLEdBQUcsMkJBQUcsS0FBS0YsSUFBTCxDQUFVSyxLQUFWLEVBQUgsQ0FBVCxDQURvQix5QkFHcEIsS0FBS1AsT0FBTCxHQUhvQix5QkFJcEJJLEdBQUcsQ0FBQyxLQUFLVixLQUFMLENBQUQsQ0FBSCxDQUNELENBTEQsaUNBTUQsQ0ExQ1csQyx5QkE2Q2RjLE1BQU0sQ0FBQ0MsT0FBUCxDQUFpQlosT0FBakIiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IGtEb25lID0gU3ltYm9sKCdrRG9uZScpO1xuY29uc3Qga1J1biA9IFN5bWJvbCgna1J1bicpO1xuXG4vKipcbiAqIEEgdmVyeSBzaW1wbGUgam9iIHF1ZXVlIHdpdGggYWRqdXN0YWJsZSBjb25jdXJyZW5jeS4gQWRhcHRlZCBmcm9tXG4gKiBodHRwczovL2dpdGh1Yi5jb20vU1RSTUwvYXN5bmMtbGltaXRlclxuICovXG5jbGFzcyBMaW1pdGVyIHtcbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgYExpbWl0ZXJgLlxuICAgKlxuICAgKiBAcGFyYW0ge051bWJlcn0gW2NvbmN1cnJlbmN5PUluZmluaXR5XSBUaGUgbWF4aW11bSBudW1iZXIgb2Ygam9icyBhbGxvd2VkXG4gICAqICAgICB0byBydW4gY29uY3VycmVudGx5XG4gICAqL1xuICBjb25zdHJ1Y3Rvcihjb25jdXJyZW5jeSkge1xuICAgIHRoaXNba0RvbmVdID0gKCkgPT4ge1xuICAgICAgdGhpcy5wZW5kaW5nLS07XG4gICAgICB0aGlzW2tSdW5dKCk7XG4gICAgfTtcbiAgICB0aGlzLmNvbmN1cnJlbmN5ID0gY29uY3VycmVuY3kgfHwgSW5maW5pdHk7XG4gICAgdGhpcy5qb2JzID0gW107XG4gICAgdGhpcy5wZW5kaW5nID0gMDtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIGEgam9iIHRvIHRoZSBxdWV1ZS5cbiAgICpcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gam9iIFRoZSBqb2IgdG8gcnVuXG4gICAqIEBwdWJsaWNcbiAgICovXG4gIGFkZChqb2IpIHtcbiAgICB0aGlzLmpvYnMucHVzaChqb2IpO1xuICAgIHRoaXNba1J1bl0oKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmVzIGEgam9iIGZyb20gdGhlIHF1ZXVlIGFuZCBydW5zIGl0IGlmIHBvc3NpYmxlLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgW2tSdW5dKCkge1xuICAgIGlmICh0aGlzLnBlbmRpbmcgPT09IHRoaXMuY29uY3VycmVuY3kpIHJldHVybjtcblxuICAgIGlmICh0aGlzLmpvYnMubGVuZ3RoKSB7XG4gICAgICBjb25zdCBqb2IgPSB0aGlzLmpvYnMuc2hpZnQoKTtcblxuICAgICAgdGhpcy5wZW5kaW5nKys7XG4gICAgICBqb2IodGhpc1trRG9uZV0pO1xuICAgIH1cbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IExpbWl0ZXI7XG4iXX0=