'use strict';function cov_2jx9lrojk(){var path="/Users/sitita/ArubaSocketServer/lib/sender.js";var hash="7276054a6e805715f2848a43c16aeaf6e31b1f3b";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/sitita/ArubaSocketServer/lib/sender.js",statementMap:{"0":{start:{line:3,column:27},end:{line:3,column:44}},"1":{start:{line:5,column:26},end:{line:5,column:57}},"2":{start:{line:6,column:25},end:{line:6,column:47}},"3":{start:{line:7,column:30},end:{line:7,column:53}},"4":{start:{line:8,column:38},end:{line:8,column:62}},"5":{start:{line:10,column:13},end:{line:10,column:28}},"6":{start:{line:23,column:4},end:{line:23,column:40}},"7":{start:{line:24,column:4},end:{line:24,column:26}},"8":{start:{line:26,column:4},end:{line:26,column:31}},"9":{start:{line:27,column:4},end:{line:27,column:27}},"10":{start:{line:29,column:4},end:{line:29,column:28}},"11":{start:{line:30,column:4},end:{line:30,column:28}},"12":{start:{line:31,column:4},end:{line:31,column:21}},"13":{start:{line:52,column:18},end:{line:52,column:50}},"14":{start:{line:53,column:17},end:{line:53,column:37}},"15":{start:{line:54,column:24},end:{line:54,column:35}},"16":{start:{line:56,column:4},end:{line:62,column:5}},"17":{start:{line:57,column:6},end:{line:57,column:18}},"18":{start:{line:58,column:6},end:{line:58,column:26}},"19":{start:{line:59,column:11},end:{line:62,column:5}},"20":{start:{line:60,column:6},end:{line:60,column:18}},"21":{start:{line:61,column:6},end:{line:61,column:26}},"22":{start:{line:64,column:19},end:{line:64,column:76}},"23":{start:{line:66,column:4},end:{line:66,column:69}},"24":{start:{line:67,column:4},end:{line:67,column:40}},"25":{start:{line:67,column:22},end:{line:67,column:40}},"26":{start:{line:69,column:4},end:{line:69,column:30}},"27":{start:{line:71,column:4},end:{line:76,column:5}},"28":{start:{line:72,column:6},end:{line:72,column:43}},"29":{start:{line:73,column:11},end:{line:76,column:5}},"30":{start:{line:74,column:6},end:{line:74,column:33}},"31":{start:{line:75,column:6},end:{line:75,column:43}},"32":{start:{line:78,column:4},end:{line:78,column:45}},"33":{start:{line:78,column:23},end:{line:78,column:45}},"34":{start:{line:80,column:4},end:{line:80,column:31}},"35":{start:{line:82,column:4},end:{line:82,column:22}},"36":{start:{line:83,column:4},end:{line:83,column:33}},"37":{start:{line:84,column:4},end:{line:84,column:33}},"38":{start:{line:85,column:4},end:{line:85,column:33}},"39":{start:{line:86,column:4},end:{line:86,column:33}},"40":{start:{line:88,column:4},end:{line:91,column:5}},"41":{start:{line:89,column:6},end:{line:89,column:57}},"42":{start:{line:90,column:6},end:{line:90,column:22}},"43":{start:{line:93,column:4},end:{line:93,column:48}},"44":{start:{line:94,column:4},end:{line:94,column:26}},"45":{start:{line:109,column:4},end:{line:126,column:5}},"46":{start:{line:110,column:6},end:{line:110,column:25}},"47":{start:{line:111,column:11},end:{line:126,column:5}},"48":{start:{line:112,column:6},end:{line:112,column:78}},"49":{start:{line:113,column:11},end:{line:126,column:5}},"50":{start:{line:114,column:6},end:{line:114,column:34}},"51":{start:{line:115,column:6},end:{line:115,column:33}},"52":{start:{line:117,column:21},end:{line:117,column:44}},"53":{start:{line:119,column:6},end:{line:121,column:7}},"54":{start:{line:120,column:8},end:{line:120,column:79}},"55":{start:{line:123,column:6},end:{line:123,column:43}},"56":{start:{line:124,column:6},end:{line:124,column:33}},"57":{start:{line:125,column:6},end:{line:125,column:25}},"58":{start:{line:128,column:4},end:{line:132,column:5}},"59":{start:{line:129,column:6},end:{line:129,column:50}},"60":{start:{line:131,column:6},end:{line:131,column:34}},"61":{start:{line:144,column:4},end:{line:153,column:6}},"62":{start:{line:165,column:16},end:{line:165,column:30}},"63":{start:{line:167,column:4},end:{line:169,column:5}},"64":{start:{line:168,column:6},end:{line:168,column:79}},"65":{start:{line:171,column:4},end:{line:175,column:5}},"66":{start:{line:172,column:6},end:{line:172,column:68}},"67":{start:{line:174,column:6},end:{line:174,column:52}},"68":{start:{line:188,column:4},end:{line:197,column:6}},"69":{start:{line:209,column:16},end:{line:209,column:30}},"70":{start:{line:211,column:4},end:{line:213,column:5}},"71":{start:{line:212,column:6},end:{line:212,column:79}},"72":{start:{line:215,column:4},end:{line:219,column:5}},"73":{start:{line:216,column:6},end:{line:216,column:68}},"74":{start:{line:218,column:6},end:{line:218,column:52}},"75":{start:{line:232,column:4},end:{line:241,column:6}},"76":{start:{line:261,column:16},end:{line:261,column:30}},"77":{start:{line:262,column:30},end:{line:262,column:79}},"78":{start:{line:263,column:17},end:{line:263,column:39}},"79":{start:{line:264,column:15},end:{line:264,column:31}},"80":{start:{line:266,column:4},end:{line:275,column:5}},"81":{start:{line:267,column:6},end:{line:267,column:34}},"82":{start:{line:268,column:6},end:{line:270,column:7}},"83":{start:{line:269,column:8},end:{line:269,column:58}},"84":{start:{line:271,column:6},end:{line:271,column:28}},"85":{start:{line:273,column:6},end:{line:273,column:19}},"86":{start:{line:274,column:6},end:{line:274,column:17}},"87":{start:{line:277,column:4},end:{line:277,column:48}},"88":{start:{line:277,column:21},end:{line:277,column:48}},"89":{start:{line:279,column:4},end:{line:304,column:5}},"90":{start:{line:280,column:19},end:{line:286,column:7}},"91":{start:{line:288,column:6},end:{line:292,column:7}},"92":{start:{line:289,column:8},end:{line:289,column:69}},"93":{start:{line:291,column:8},end:{line:291,column:53}},"94":{start:{line:294,column:6},end:{line:303,column:8}},"95":{start:{line:327,column:4},end:{line:330,column:5}},"96":{start:{line:328,column:6},end:{line:328,column:54}},"97":{start:{line:329,column:6},end:{line:329,column:13}},"98":{start:{line:332,column:30},end:{line:332,column:79}},"99":{start:{line:334,column:4},end:{line:334,column:39}},"100":{start:{line:335,column:4},end:{line:335,column:27}},"101":{start:{line:336,column:4},end:{line:358,column:7}},"102":{start:{line:337,column:6},end:{line:351,column:7}},"103":{start:{line:338,column:20},end:{line:340,column:9}},"104":{start:{line:342,column:8},end:{line:342,column:46}},"105":{start:{line:342,column:38},end:{line:342,column:46}},"106":{start:{line:344,column:8},end:{line:348,column:9}},"107":{start:{line:344,column:21},end:{line:344,column:22}},"108":{start:{line:345,column:27},end:{line:345,column:44}},"109":{start:{line:347,column:10},end:{line:347,column:60}},"110":{start:{line:347,column:46},end:{line:347,column:60}},"111":{start:{line:350,column:8},end:{line:350,column:15}},"112":{start:{line:353,column:6},end:{line:353,column:41}},"113":{start:{line:354,column:6},end:{line:354,column:30}},"114":{start:{line:355,column:6},end:{line:355,column:31}},"115":{start:{line:356,column:6},end:{line:356,column:53}},"116":{start:{line:357,column:6},end:{line:357,column:21}},"117":{start:{line:367,column:4},end:{line:372,column:5}},"118":{start:{line:368,column:21},end:{line:368,column:40}},"119":{start:{line:370,column:6},end:{line:370,column:46}},"120":{start:{line:371,column:6},end:{line:371,column:54}},"121":{start:{line:382,column:4},end:{line:382,column:44}},"122":{start:{line:383,column:4},end:{line:383,column:29}},"123":{start:{line:394,column:4},end:{line:401,column:5}},"124":{start:{line:395,column:6},end:{line:395,column:26}},"125":{start:{line:396,column:6},end:{line:396,column:34}},"126":{start:{line:397,column:6},end:{line:397,column:38}},"127":{start:{line:398,column:6},end:{line:398,column:28}},"128":{start:{line:400,column:6},end:{line:400,column:38}},"129":{start:{line:405,column:0},end:{line:405,column:24}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:22,column:2},end:{line:22,column:3}},loc:{start:{line:22,column:34},end:{line:32,column:3}},line:22},"1":{name:"(anonymous_1)",decl:{start:{line:51,column:2},end:{line:51,column:3}},loc:{start:{line:51,column:30},end:{line:95,column:3}},line:51},"2":{name:"(anonymous_2)",decl:{start:{line:106,column:2},end:{line:106,column:3}},loc:{start:{line:106,column:30},end:{line:133,column:3}},line:106},"3":{name:"(anonymous_3)",decl:{start:{line:143,column:2},end:{line:143,column:3}},loc:{start:{line:143,column:26},end:{line:154,column:3}},line:143},"4":{name:"(anonymous_4)",decl:{start:{line:164,column:2},end:{line:164,column:3}},loc:{start:{line:164,column:23},end:{line:176,column:3}},line:164},"5":{name:"(anonymous_5)",decl:{start:{line:187,column:2},end:{line:187,column:3}},loc:{start:{line:187,column:35},end:{line:198,column:3}},line:187},"6":{name:"(anonymous_6)",decl:{start:{line:208,column:2},end:{line:208,column:3}},loc:{start:{line:208,column:23},end:{line:220,column:3}},line:208},"7":{name:"(anonymous_7)",decl:{start:{line:231,column:2},end:{line:231,column:3}},loc:{start:{line:231,column:35},end:{line:242,column:3}},line:231},"8":{name:"(anonymous_8)",decl:{start:{line:260,column:2},end:{line:260,column:3}},loc:{start:{line:260,column:26},end:{line:305,column:3}},line:260},"9":{name:"(anonymous_9)",decl:{start:{line:326,column:2},end:{line:326,column:3}},loc:{start:{line:326,column:40},end:{line:359,column:3}},line:326},"10":{name:"(anonymous_10)",decl:{start:{line:336,column:50},end:{line:336,column:51}},loc:{start:{line:336,column:62},end:{line:358,column:5}},line:336},"11":{name:"(anonymous_11)",decl:{start:{line:366,column:2},end:{line:366,column:3}},loc:{start:{line:366,column:12},end:{line:373,column:3}},line:366},"12":{name:"(anonymous_12)",decl:{start:{line:381,column:2},end:{line:381,column:3}},loc:{start:{line:381,column:18},end:{line:384,column:3}},line:381},"13":{name:"(anonymous_13)",decl:{start:{line:393,column:2},end:{line:393,column:3}},loc:{start:{line:393,column:22},end:{line:402,column:3}},line:393}},branchMap:{"0":{loc:{start:{line:23,column:23},end:{line:23,column:39}},type:"binary-expr",locations:[{start:{line:23,column:23},end:{line:23,column:33}},{start:{line:23,column:37},end:{line:23,column:39}}],line:23},"1":{loc:{start:{line:52,column:18},end:{line:52,column:50}},type:"binary-expr",locations:[{start:{line:52,column:18},end:{line:52,column:30}},{start:{line:52,column:34},end:{line:52,column:50}}],line:52},"2":{loc:{start:{line:53,column:17},end:{line:53,column:37}},type:"cond-expr",locations:[{start:{line:53,column:32},end:{line:53,column:33}},{start:{line:53,column:36},end:{line:53,column:37}}],line:53},"3":{loc:{start:{line:56,column:4},end:{line:62,column:5}},type:"if",locations:[{start:{line:56,column:4},end:{line:62,column:5}},{start:{line:56,column:4},end:{line:62,column:5}}],line:56},"4":{loc:{start:{line:59,column:11},end:{line:62,column:5}},type:"if",locations:[{start:{line:59,column:11},end:{line:62,column:5}},{start:{line:59,column:11},end:{line:62,column:5}}],line:59},"5":{loc:{start:{line:64,column:38},end:{line:64,column:75}},type:"cond-expr",locations:[{start:{line:64,column:46},end:{line:64,column:66}},{start:{line:64,column:69},end:{line:64,column:75}}],line:64},"6":{loc:{start:{line:66,column:16},end:{line:66,column:68}},type:"cond-expr",locations:[{start:{line:66,column:30},end:{line:66,column:51}},{start:{line:66,column:54},end:{line:66,column:68}}],line:66},"7":{loc:{start:{line:67,column:4},end:{line:67,column:40}},type:"if",locations:[{start:{line:67,column:4},end:{line:67,column:40}},{start:{line:67,column:4},end:{line:67,column:40}}],line:67},"8":{loc:{start:{line:71,column:4},end:{line:76,column:5}},type:"if",locations:[{start:{line:71,column:4},end:{line:76,column:5}},{start:{line:71,column:4},end:{line:76,column:5}}],line:71},"9":{loc:{start:{line:73,column:11},end:{line:76,column:5}},type:"if",locations:[{start:{line:73,column:11},end:{line:76,column:5}},{start:{line:73,column:11},end:{line:76,column:5}}],line:73},"10":{loc:{start:{line:78,column:4},end:{line:78,column:45}},type:"if",locations:[{start:{line:78,column:4},end:{line:78,column:45}},{start:{line:78,column:4},end:{line:78,column:45}}],line:78},"11":{loc:{start:{line:88,column:4},end:{line:91,column:5}},type:"if",locations:[{start:{line:88,column:4},end:{line:91,column:5}},{start:{line:88,column:4},end:{line:91,column:5}}],line:88},"12":{loc:{start:{line:109,column:4},end:{line:126,column:5}},type:"if",locations:[{start:{line:109,column:4},end:{line:126,column:5}},{start:{line:109,column:4},end:{line:126,column:5}}],line:109},"13":{loc:{start:{line:111,column:11},end:{line:126,column:5}},type:"if",locations:[{start:{line:111,column:11},end:{line:126,column:5}},{start:{line:111,column:11},end:{line:126,column:5}}],line:111},"14":{loc:{start:{line:111,column:15},end:{line:111,column:67}},type:"binary-expr",locations:[{start:{line:111,column:15},end:{line:111,column:39}},{start:{line:111,column:43},end:{line:111,column:67}}],line:111},"15":{loc:{start:{line:113,column:11},end:{line:126,column:5}},type:"if",locations:[{start:{line:113,column:11},end:{line:126,column:5}},{start:{line:113,column:11},end:{line:126,column:5}}],line:113},"16":{loc:{start:{line:113,column:15},end:{line:113,column:48}},type:"binary-expr",locations:[{start:{line:113,column:15},end:{line:113,column:33}},{start:{line:113,column:37},end:{line:113,column:48}}],line:113},"17":{loc:{start:{line:119,column:6},end:{line:121,column:7}},type:"if",locations:[{start:{line:119,column:6},end:{line:121,column:7}},{start:{line:119,column:6},end:{line:121,column:7}}],line:119},"18":{loc:{start:{line:128,column:4},end:{line:132,column:5}},type:"if",locations:[{start:{line:128,column:4},end:{line:132,column:5}},{start:{line:128,column:4},end:{line:132,column:5}}],line:128},"19":{loc:{start:{line:167,column:4},end:{line:169,column:5}},type:"if",locations:[{start:{line:167,column:4},end:{line:169,column:5}},{start:{line:167,column:4},end:{line:169,column:5}}],line:167},"20":{loc:{start:{line:171,column:4},end:{line:175,column:5}},type:"if",locations:[{start:{line:171,column:4},end:{line:175,column:5}},{start:{line:171,column:4},end:{line:175,column:5}}],line:171},"21":{loc:{start:{line:211,column:4},end:{line:213,column:5}},type:"if",locations:[{start:{line:211,column:4},end:{line:213,column:5}},{start:{line:211,column:4},end:{line:213,column:5}}],line:211},"22":{loc:{start:{line:215,column:4},end:{line:219,column:5}},type:"if",locations:[{start:{line:215,column:4},end:{line:219,column:5}},{start:{line:215,column:4},end:{line:219,column:5}}],line:215},"23":{loc:{start:{line:263,column:17},end:{line:263,column:39}},type:"cond-expr",locations:[{start:{line:263,column:34},end:{line:263,column:35}},{start:{line:263,column:38},end:{line:263,column:39}}],line:263},"24":{loc:{start:{line:266,column:4},end:{line:275,column:5}},type:"if",locations:[{start:{line:266,column:4},end:{line:275,column:5}},{start:{line:266,column:4},end:{line:275,column:5}}],line:266},"25":{loc:{start:{line:268,column:6},end:{line:270,column:7}},type:"if",locations:[{start:{line:268,column:6},end:{line:270,column:7}},{start:{line:268,column:6},end:{line:270,column:7}}],line:268},"26":{loc:{start:{line:268,column:10},end:{line:268,column:35}},type:"binary-expr",locations:[{start:{line:268,column:10},end:{line:268,column:14}},{start:{line:268,column:18},end:{line:268,column:35}}],line:268},"27":{loc:{start:{line:277,column:4},end:{line:277,column:48}},type:"if",locations:[{start:{line:277,column:4},end:{line:277,column:48}},{start:{line:277,column:4},end:{line:277,column:48}}],line:277},"28":{loc:{start:{line:279,column:4},end:{line:304,column:5}},type:"if",locations:[{start:{line:279,column:4},end:{line:304,column:5}},{start:{line:279,column:4},end:{line:304,column:5}}],line:279},"29":{loc:{start:{line:288,column:6},end:{line:292,column:7}},type:"if",locations:[{start:{line:288,column:6},end:{line:292,column:7}},{start:{line:288,column:6},end:{line:292,column:7}}],line:288},"30":{loc:{start:{line:327,column:4},end:{line:330,column:5}},type:"if",locations:[{start:{line:327,column:4},end:{line:330,column:5}},{start:{line:327,column:4},end:{line:330,column:5}}],line:327},"31":{loc:{start:{line:337,column:6},end:{line:351,column:7}},type:"if",locations:[{start:{line:337,column:6},end:{line:351,column:7}},{start:{line:337,column:6},end:{line:351,column:7}}],line:337},"32":{loc:{start:{line:342,column:8},end:{line:342,column:46}},type:"if",locations:[{start:{line:342,column:8},end:{line:342,column:46}},{start:{line:342,column:8},end:{line:342,column:46}}],line:342},"33":{loc:{start:{line:347,column:10},end:{line:347,column:60}},type:"if",locations:[{start:{line:347,column:10},end:{line:347,column:60}},{start:{line:347,column:10},end:{line:347,column:60}}],line:347},"34":{loc:{start:{line:367,column:11},end:{line:367,column:49}},type:"binary-expr",locations:[{start:{line:367,column:11},end:{line:367,column:27}},{start:{line:367,column:31},end:{line:367,column:49}}],line:367},"35":{loc:{start:{line:394,column:4},end:{line:401,column:5}},type:"if",locations:[{start:{line:394,column:4},end:{line:401,column:5}},{start:{line:394,column:4},end:{line:401,column:5}}],line:394}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"7276054a6e805715f2848a43c16aeaf6e31b1f3b"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];{// @ts-ignore
cov_2jx9lrojk=function(){return actualCoverage;};}return actualCoverage;}cov_2jx9lrojk();const{randomFillSync}=(cov_2jx9lrojk().s[0]++,require('crypto'));const PerMessageDeflate=(cov_2jx9lrojk().s[1]++,require('./permessage-deflate'));const{EMPTY_BUFFER}=(cov_2jx9lrojk().s[2]++,require('./constants'));const{isValidStatusCode}=(cov_2jx9lrojk().s[3]++,require('./validation'));const{mask:applyMask,toBuffer}=(cov_2jx9lrojk().s[4]++,require('./buffer-util'));const mask=(cov_2jx9lrojk().s[5]++,Buffer.alloc(4));/**
 * HyBi Sender implementation.
 */class Sender{/**
   * Creates a Sender instance.
   *
   * @param {net.Socket} socket The connection socket
   * @param {Object} [extensions] An object containing the negotiated extensions
   */constructor(socket,extensions){cov_2jx9lrojk().f[0]++;cov_2jx9lrojk().s[6]++;this._extensions=(cov_2jx9lrojk().b[0][0]++,extensions)||(cov_2jx9lrojk().b[0][1]++,{});cov_2jx9lrojk().s[7]++;this._socket=socket;cov_2jx9lrojk().s[8]++;this._firstFragment=true;cov_2jx9lrojk().s[9]++;this._compress=false;cov_2jx9lrojk().s[10]++;this._bufferedBytes=0;cov_2jx9lrojk().s[11]++;this._deflating=false;cov_2jx9lrojk().s[12]++;this._queue=[];}/**
   * Frames a piece of data according to the HyBi WebSocket protocol.
   *
   * @param {Buffer} data The data to frame
   * @param {Object} options Options object
   * @param {Number} options.opcode The opcode
   * @param {Boolean} [options.readOnly=false] Specifies whether `data` can be
   *     modified
   * @param {Boolean} [options.fin=false] Specifies whether or not to set the
   *     FIN bit
   * @param {Boolean} [options.mask=false] Specifies whether or not to mask
   *     `data`
   * @param {Boolean} [options.rsv1=false] Specifies whether or not to set the
   *     RSV1 bit
   * @return {Buffer[]} The framed data as a list of `Buffer` instances
   * @public
   */static frame(data,options){cov_2jx9lrojk().f[1]++;const merge=(cov_2jx9lrojk().s[13]++,(cov_2jx9lrojk().b[1][0]++,options.mask)&&(cov_2jx9lrojk().b[1][1]++,options.readOnly));let offset=(cov_2jx9lrojk().s[14]++,options.mask?(cov_2jx9lrojk().b[2][0]++,6):(cov_2jx9lrojk().b[2][1]++,2));let payloadLength=(cov_2jx9lrojk().s[15]++,data.length);cov_2jx9lrojk().s[16]++;if(data.length>=65536){cov_2jx9lrojk().b[3][0]++;cov_2jx9lrojk().s[17]++;offset+=8;cov_2jx9lrojk().s[18]++;payloadLength=127;}else{cov_2jx9lrojk().b[3][1]++;cov_2jx9lrojk().s[19]++;if(data.length>125){cov_2jx9lrojk().b[4][0]++;cov_2jx9lrojk().s[20]++;offset+=2;cov_2jx9lrojk().s[21]++;payloadLength=126;}else{cov_2jx9lrojk().b[4][1]++;}}const target=(cov_2jx9lrojk().s[22]++,Buffer.allocUnsafe(merge?(cov_2jx9lrojk().b[5][0]++,data.length+offset):(cov_2jx9lrojk().b[5][1]++,offset)));cov_2jx9lrojk().s[23]++;target[0]=options.fin?(cov_2jx9lrojk().b[6][0]++,options.opcode|0x80):(cov_2jx9lrojk().b[6][1]++,options.opcode);cov_2jx9lrojk().s[24]++;if(options.rsv1){cov_2jx9lrojk().b[7][0]++;cov_2jx9lrojk().s[25]++;target[0]|=0x40;}else{cov_2jx9lrojk().b[7][1]++;}cov_2jx9lrojk().s[26]++;target[1]=payloadLength;cov_2jx9lrojk().s[27]++;if(payloadLength===126){cov_2jx9lrojk().b[8][0]++;cov_2jx9lrojk().s[28]++;target.writeUInt16BE(data.length,2);}else{cov_2jx9lrojk().b[8][1]++;cov_2jx9lrojk().s[29]++;if(payloadLength===127){cov_2jx9lrojk().b[9][0]++;cov_2jx9lrojk().s[30]++;target.writeUInt32BE(0,2);cov_2jx9lrojk().s[31]++;target.writeUInt32BE(data.length,6);}else{cov_2jx9lrojk().b[9][1]++;}}cov_2jx9lrojk().s[32]++;if(!options.mask){cov_2jx9lrojk().b[10][0]++;cov_2jx9lrojk().s[33]++;return[target,data];}else{cov_2jx9lrojk().b[10][1]++;}cov_2jx9lrojk().s[34]++;randomFillSync(mask,0,4);cov_2jx9lrojk().s[35]++;target[1]|=0x80;cov_2jx9lrojk().s[36]++;target[offset-4]=mask[0];cov_2jx9lrojk().s[37]++;target[offset-3]=mask[1];cov_2jx9lrojk().s[38]++;target[offset-2]=mask[2];cov_2jx9lrojk().s[39]++;target[offset-1]=mask[3];cov_2jx9lrojk().s[40]++;if(merge){cov_2jx9lrojk().b[11][0]++;cov_2jx9lrojk().s[41]++;applyMask(data,mask,target,offset,data.length);cov_2jx9lrojk().s[42]++;return[target];}else{cov_2jx9lrojk().b[11][1]++;}cov_2jx9lrojk().s[43]++;applyMask(data,mask,data,0,data.length);cov_2jx9lrojk().s[44]++;return[target,data];}/**
   * Sends a close message to the other peer.
   *
   * @param {Number} [code] The status code component of the body
   * @param {String} [data] The message component of the body
   * @param {Boolean} [mask=false] Specifies whether or not to mask the message
   * @param {Function} [cb] Callback
   * @public
   */close(code,data,mask,cb){cov_2jx9lrojk().f[2]++;let buf;cov_2jx9lrojk().s[45]++;if(code===undefined){cov_2jx9lrojk().b[12][0]++;cov_2jx9lrojk().s[46]++;buf=EMPTY_BUFFER;}else{cov_2jx9lrojk().b[12][1]++;cov_2jx9lrojk().s[47]++;if((cov_2jx9lrojk().b[14][0]++,typeof code!=='number')||(cov_2jx9lrojk().b[14][1]++,!isValidStatusCode(code))){cov_2jx9lrojk().b[13][0]++;cov_2jx9lrojk().s[48]++;throw new TypeError('First argument must be a valid error code number');}else{cov_2jx9lrojk().b[13][1]++;cov_2jx9lrojk().s[49]++;if((cov_2jx9lrojk().b[16][0]++,data===undefined)||(cov_2jx9lrojk().b[16][1]++,data==='')){cov_2jx9lrojk().b[15][0]++;cov_2jx9lrojk().s[50]++;buf=Buffer.allocUnsafe(2);cov_2jx9lrojk().s[51]++;buf.writeUInt16BE(code,0);}else{cov_2jx9lrojk().b[15][1]++;const length=(cov_2jx9lrojk().s[52]++,Buffer.byteLength(data));cov_2jx9lrojk().s[53]++;if(length>123){cov_2jx9lrojk().b[17][0]++;cov_2jx9lrojk().s[54]++;throw new RangeError('The message must not be greater than 123 bytes');}else{cov_2jx9lrojk().b[17][1]++;}cov_2jx9lrojk().s[55]++;buf=Buffer.allocUnsafe(2+length);cov_2jx9lrojk().s[56]++;buf.writeUInt16BE(code,0);cov_2jx9lrojk().s[57]++;buf.write(data,2);}}}cov_2jx9lrojk().s[58]++;if(this._deflating){cov_2jx9lrojk().b[18][0]++;cov_2jx9lrojk().s[59]++;this.enqueue([this.doClose,buf,mask,cb]);}else{cov_2jx9lrojk().b[18][1]++;cov_2jx9lrojk().s[60]++;this.doClose(buf,mask,cb);}}/**
   * Frames and sends a close message.
   *
   * @param {Buffer} data The message to send
   * @param {Boolean} [mask=false] Specifies whether or not to mask `data`
   * @param {Function} [cb] Callback
   * @private
   */doClose(data,mask,cb){cov_2jx9lrojk().f[3]++;cov_2jx9lrojk().s[61]++;this.sendFrame(Sender.frame(data,{fin:true,rsv1:false,opcode:0x08,mask,readOnly:false}),cb);}/**
   * Sends a ping message to the other peer.
   *
   * @param {*} data The message to send
   * @param {Boolean} [mask=false] Specifies whether or not to mask `data`
   * @param {Function} [cb] Callback
   * @public
   */ping(data,mask,cb){cov_2jx9lrojk().f[4]++;const buf=(cov_2jx9lrojk().s[62]++,toBuffer(data));cov_2jx9lrojk().s[63]++;if(buf.length>125){cov_2jx9lrojk().b[19][0]++;cov_2jx9lrojk().s[64]++;throw new RangeError('The data size must not be greater than 125 bytes');}else{cov_2jx9lrojk().b[19][1]++;}cov_2jx9lrojk().s[65]++;if(this._deflating){cov_2jx9lrojk().b[20][0]++;cov_2jx9lrojk().s[66]++;this.enqueue([this.doPing,buf,mask,toBuffer.readOnly,cb]);}else{cov_2jx9lrojk().b[20][1]++;cov_2jx9lrojk().s[67]++;this.doPing(buf,mask,toBuffer.readOnly,cb);}}/**
   * Frames and sends a ping message.
   *
   * @param {Buffer} data The message to send
   * @param {Boolean} [mask=false] Specifies whether or not to mask `data`
   * @param {Boolean} [readOnly=false] Specifies whether `data` can be modified
   * @param {Function} [cb] Callback
   * @private
   */doPing(data,mask,readOnly,cb){cov_2jx9lrojk().f[5]++;cov_2jx9lrojk().s[68]++;this.sendFrame(Sender.frame(data,{fin:true,rsv1:false,opcode:0x09,mask,readOnly}),cb);}/**
   * Sends a pong message to the other peer.
   *
   * @param {*} data The message to send
   * @param {Boolean} [mask=false] Specifies whether or not to mask `data`
   * @param {Function} [cb] Callback
   * @public
   */pong(data,mask,cb){cov_2jx9lrojk().f[6]++;const buf=(cov_2jx9lrojk().s[69]++,toBuffer(data));cov_2jx9lrojk().s[70]++;if(buf.length>125){cov_2jx9lrojk().b[21][0]++;cov_2jx9lrojk().s[71]++;throw new RangeError('The data size must not be greater than 125 bytes');}else{cov_2jx9lrojk().b[21][1]++;}cov_2jx9lrojk().s[72]++;if(this._deflating){cov_2jx9lrojk().b[22][0]++;cov_2jx9lrojk().s[73]++;this.enqueue([this.doPong,buf,mask,toBuffer.readOnly,cb]);}else{cov_2jx9lrojk().b[22][1]++;cov_2jx9lrojk().s[74]++;this.doPong(buf,mask,toBuffer.readOnly,cb);}}/**
   * Frames and sends a pong message.
   *
   * @param {Buffer} data The message to send
   * @param {Boolean} [mask=false] Specifies whether or not to mask `data`
   * @param {Boolean} [readOnly=false] Specifies whether `data` can be modified
   * @param {Function} [cb] Callback
   * @private
   */doPong(data,mask,readOnly,cb){cov_2jx9lrojk().f[7]++;cov_2jx9lrojk().s[75]++;this.sendFrame(Sender.frame(data,{fin:true,rsv1:false,opcode:0x0a,mask,readOnly}),cb);}/**
   * Sends a data message to the other peer.
   *
   * @param {*} data The message to send
   * @param {Object} options Options object
   * @param {Boolean} [options.compress=false] Specifies whether or not to
   *     compress `data`
   * @param {Boolean} [options.binary=false] Specifies whether `data` is binary
   *     or text
   * @param {Boolean} [options.fin=false] Specifies whether the fragment is the
   *     last one
   * @param {Boolean} [options.mask=false] Specifies whether or not to mask
   *     `data`
   * @param {Function} [cb] Callback
   * @public
   */send(data,options,cb){cov_2jx9lrojk().f[8]++;const buf=(cov_2jx9lrojk().s[76]++,toBuffer(data));const perMessageDeflate=(cov_2jx9lrojk().s[77]++,this._extensions[PerMessageDeflate.extensionName]);let opcode=(cov_2jx9lrojk().s[78]++,options.binary?(cov_2jx9lrojk().b[23][0]++,2):(cov_2jx9lrojk().b[23][1]++,1));let rsv1=(cov_2jx9lrojk().s[79]++,options.compress);cov_2jx9lrojk().s[80]++;if(this._firstFragment){cov_2jx9lrojk().b[24][0]++;cov_2jx9lrojk().s[81]++;this._firstFragment=false;cov_2jx9lrojk().s[82]++;if((cov_2jx9lrojk().b[26][0]++,rsv1)&&(cov_2jx9lrojk().b[26][1]++,perMessageDeflate)){cov_2jx9lrojk().b[25][0]++;cov_2jx9lrojk().s[83]++;rsv1=buf.length>=perMessageDeflate._threshold;}else{cov_2jx9lrojk().b[25][1]++;}cov_2jx9lrojk().s[84]++;this._compress=rsv1;}else{cov_2jx9lrojk().b[24][1]++;cov_2jx9lrojk().s[85]++;rsv1=false;cov_2jx9lrojk().s[86]++;opcode=0;}cov_2jx9lrojk().s[87]++;if(options.fin){cov_2jx9lrojk().b[27][0]++;cov_2jx9lrojk().s[88]++;this._firstFragment=true;}else{cov_2jx9lrojk().b[27][1]++;}cov_2jx9lrojk().s[89]++;if(perMessageDeflate){cov_2jx9lrojk().b[28][0]++;const opts=(cov_2jx9lrojk().s[90]++,{fin:options.fin,rsv1,opcode,mask:options.mask,readOnly:toBuffer.readOnly});cov_2jx9lrojk().s[91]++;if(this._deflating){cov_2jx9lrojk().b[29][0]++;cov_2jx9lrojk().s[92]++;this.enqueue([this.dispatch,buf,this._compress,opts,cb]);}else{cov_2jx9lrojk().b[29][1]++;cov_2jx9lrojk().s[93]++;this.dispatch(buf,this._compress,opts,cb);}}else{cov_2jx9lrojk().b[28][1]++;cov_2jx9lrojk().s[94]++;this.sendFrame(Sender.frame(buf,{fin:options.fin,rsv1:false,opcode,mask:options.mask,readOnly:toBuffer.readOnly}),cb);}}/**
   * Dispatches a data message.
   *
   * @param {Buffer} data The message to send
   * @param {Boolean} [compress=false] Specifies whether or not to compress
   *     `data`
   * @param {Object} options Options object
   * @param {Number} options.opcode The opcode
   * @param {Boolean} [options.readOnly=false] Specifies whether `data` can be
   *     modified
   * @param {Boolean} [options.fin=false] Specifies whether or not to set the
   *     FIN bit
   * @param {Boolean} [options.mask=false] Specifies whether or not to mask
   *     `data`
   * @param {Boolean} [options.rsv1=false] Specifies whether or not to set the
   *     RSV1 bit
   * @param {Function} [cb] Callback
   * @private
   */dispatch(data,compress,options,cb){cov_2jx9lrojk().f[9]++;cov_2jx9lrojk().s[95]++;if(!compress){cov_2jx9lrojk().b[30][0]++;cov_2jx9lrojk().s[96]++;this.sendFrame(Sender.frame(data,options),cb);cov_2jx9lrojk().s[97]++;return;}else{cov_2jx9lrojk().b[30][1]++;}const perMessageDeflate=(cov_2jx9lrojk().s[98]++,this._extensions[PerMessageDeflate.extensionName]);cov_2jx9lrojk().s[99]++;this._bufferedBytes+=data.length;cov_2jx9lrojk().s[100]++;this._deflating=true;cov_2jx9lrojk().s[101]++;perMessageDeflate.compress(data,options.fin,(_,buf)=>{cov_2jx9lrojk().f[10]++;cov_2jx9lrojk().s[102]++;if(this._socket.destroyed){cov_2jx9lrojk().b[31][0]++;const err=(cov_2jx9lrojk().s[103]++,new Error('The socket was closed while data was being compressed'));cov_2jx9lrojk().s[104]++;if(typeof cb==='function'){cov_2jx9lrojk().b[32][0]++;cov_2jx9lrojk().s[105]++;cb(err);}else{cov_2jx9lrojk().b[32][1]++;}cov_2jx9lrojk().s[106]++;for(let i=(cov_2jx9lrojk().s[107]++,0);i<this._queue.length;i++){const callback=(cov_2jx9lrojk().s[108]++,this._queue[i][4]);cov_2jx9lrojk().s[109]++;if(typeof callback==='function'){cov_2jx9lrojk().b[33][0]++;cov_2jx9lrojk().s[110]++;callback(err);}else{cov_2jx9lrojk().b[33][1]++;}}cov_2jx9lrojk().s[111]++;return;}else{cov_2jx9lrojk().b[31][1]++;}cov_2jx9lrojk().s[112]++;this._bufferedBytes-=data.length;cov_2jx9lrojk().s[113]++;this._deflating=false;cov_2jx9lrojk().s[114]++;options.readOnly=false;cov_2jx9lrojk().s[115]++;this.sendFrame(Sender.frame(buf,options),cb);cov_2jx9lrojk().s[116]++;this.dequeue();});}/**
   * Executes queued send operations.
   *
   * @private
   */dequeue(){cov_2jx9lrojk().f[11]++;cov_2jx9lrojk().s[117]++;while((cov_2jx9lrojk().b[34][0]++,!this._deflating)&&(cov_2jx9lrojk().b[34][1]++,this._queue.length)){const params=(cov_2jx9lrojk().s[118]++,this._queue.shift());cov_2jx9lrojk().s[119]++;this._bufferedBytes-=params[1].length;cov_2jx9lrojk().s[120]++;Reflect.apply(params[0],this,params.slice(1));}}/**
   * Enqueues a send operation.
   *
   * @param {Array} params Send operation parameters.
   * @private
   */enqueue(params){cov_2jx9lrojk().f[12]++;cov_2jx9lrojk().s[121]++;this._bufferedBytes+=params[1].length;cov_2jx9lrojk().s[122]++;this._queue.push(params);}/**
   * Sends a frame.
   *
   * @param {Buffer[]} list The frame to send
   * @param {Function} [cb] Callback
   * @private
   */sendFrame(list,cb){cov_2jx9lrojk().f[13]++;cov_2jx9lrojk().s[123]++;if(list.length===2){cov_2jx9lrojk().b[35][0]++;cov_2jx9lrojk().s[124]++;this._socket.cork();cov_2jx9lrojk().s[125]++;this._socket.write(list[0]);cov_2jx9lrojk().s[126]++;this._socket.write(list[1],cb);cov_2jx9lrojk().s[127]++;this._socket.uncork();}else{cov_2jx9lrojk().b[35][1]++;cov_2jx9lrojk().s[128]++;this._socket.write(list[0],cb);}}}cov_2jx9lrojk().s[129]++;module.exports=Sender;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,